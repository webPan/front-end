import{_ as s,c as a,a as e,o as p}from"./app-CjaSKhBf.js";const t="/front-ent/blog/assets/eventLoop-HSJtfxXK.jpg",o={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="双向绑定proxy和defineproperty" tabindex="-1"><a class="header-anchor" href="#双向绑定proxy和defineproperty"><span>双向绑定proxy和defineProperty</span></a></h2><p>defineProperty 数据劫持比较好理解,通常我们利用Object.defineProperty劫持对象的访问器,在属性值发生变化时我们可以获取变化</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">k</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">&#39;k&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取data.k值时会被打印</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data.k的值被获取了&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//改变data.k值时会被打印</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data.k的值被改变了&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    data<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    data<span class="token punctuation">.</span>k<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺陷：无法监听数组变化</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">k</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> newData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取data.k值时会被打印</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data.k的值被获取了&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//改变data.k值时会被打印</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data.k的值被改变了&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    newData<span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    newData<span class="token punctuation">.</span>k<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Proxy返回的是一个新对象,我们可以只操作新的对象达到目的,而Object.defineProperty只能遍历对象属性直接修改。<br><a href="https://www.jianshu.com/p/2df6dcddb0d7" target="_blank" rel="noopener noreferrer">参考</a></p><h2 id="页面监控" tabindex="-1"><a class="header-anchor" href="#页面监控"><span>页面监控</span></a></h2><ul><li>数据采集 --&gt; 数据上报 --&gt; 服务端处理 --&gt; 数据库存储 --&gt; 数据监控可视化平台</li><li><code>Performance</code> 接口可以获取到当前页面中与性能相关的信息，它是 <code>High Resolution Time API</code> 的一部分，同时也融合了 <code>Performance</code> <code>Timeline API</code>、<code>Navigation Timing API</code>、 <code>User Timing API</code> 和 <code>Resource Timing API</code>。</li></ul><h2 id="eventloop事件循环" tabindex="-1"><a class="header-anchor" href="#eventloop事件循环"><span>eventloop事件循环</span></a></h2><p><strong>背景</strong><br> JavaScript 是一门 单线程 语言，即同一时间只能执行一个任务，即代码执行是同步并且阻塞的。为了实现主线程的不阻塞，Event Loop这样的方案应运而生<br><img src="`+t+`" alt="W3C"><br> 在JavaScript中所有同步任务都在主线程上执行，这就形成一个执行栈。<br> 而异步任务会被放置到异步处理模块中，当异步任务有了运行结果，就将该函数移入任务队列。<br> 一旦执行栈中的所有同步任务执行完毕，引擎就会读取任务队列，然后将任务队列中的第一个任务放入执行栈中运行。<br> 只要主线程空了，就会去读取任务队列，该过程不断重复，这就是所谓的 <code>事件循环</code>。</p><h2 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝"><span>深拷贝和浅拷贝</span></a></h2><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存<br> 深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//深拷贝</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//判断参数是不是一个对象</span></span>
<span class="line">    <span class="token keyword">let</span> objClone <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token operator">===</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//判断ojb子元素是否为对象，如果是，递归复制</span></span>
<span class="line">                <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">//如果不是，简单复制</span></span>
<span class="line">                    objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> objClone<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链"><span>原型和原型链</span></a></h2><ul><li><p>在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，这个指针被称为对象的原型。</p></li><li><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，这就叫原型链</p></li></ul><h2 id="proto-和-prototype-的区别" tabindex="-1"><a class="header-anchor" href="#proto-和-prototype-的区别"><span>proto 和 prototype 的区别</span></a></h2><ol><li>对象有属性<code>__proto__</code>,指向该对象的构造函数的原型对象。</li><li>方法除了有属性<code>__proto__</code>,还有属性<code>prototype</code>，<code>prototype</code>指向该方法的原型对象。</li></ol><h2 id="前端性能优化" tabindex="-1"><a class="header-anchor" href="#前端性能优化"><span>前端性能优化</span></a></h2><ul><li>减少请求数量 图片合并 雪碧图 <code>Base64</code> 使用字体图标来代替图片</li><li>减少重定向 使用缓存 不使用<code>CSS @import</code> 避免使用空的<code>src</code>和<code>href</code></li><li>减小资源大小 <code>js/css/html/img</code></li><li>优化网络连接 使用CDN 使用DNS预解析</li><li>优化资源加载 资源加载位置 资源加载时机</li><li>减少重绘回流 防抖和节流 及时清理环境</li><li>性能更好的API 用对选择器 使用<code>requestAnimationFrame</code>来替代<code>setTimeout</code>和<code>setInterval</code> 使用<code>IntersectionObserver</code>来实现图片可视区域的懒加载 使用<code>web worker</code></li><li><code>webpack</code>优化 动态导入和按需加载 剔除无用代码 长缓存优化</li></ul>`,19)]))}const r=s(o,[["render",l],["__file","senior.html.vue"]]),u=JSON.parse('{"path":"/senior.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"双向绑定proxy和defineProperty","slug":"双向绑定proxy和defineproperty","link":"#双向绑定proxy和defineproperty","children":[]},{"level":2,"title":"页面监控","slug":"页面监控","link":"#页面监控","children":[]},{"level":2,"title":"eventloop事件循环","slug":"eventloop事件循环","link":"#eventloop事件循环","children":[]},{"level":2,"title":"深拷贝和浅拷贝","slug":"深拷贝和浅拷贝","link":"#深拷贝和浅拷贝","children":[]},{"level":2,"title":"原型和原型链","slug":"原型和原型链","link":"#原型和原型链","children":[]},{"level":2,"title":"proto 和 prototype 的区别","slug":"proto-和-prototype-的区别","link":"#proto-和-prototype-的区别","children":[]},{"level":2,"title":"前端性能优化","slug":"前端性能优化","link":"#前端性能优化","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"senior.md"}');export{r as comp,u as data};
