import{_ as s,c as a,a as p,o as t}from"./app-CjaSKhBf.js";const e="/front-ent/blog/assets/tcp-udp-DyhFsrES.png",l="/front-ent/blog/assets/mvvm-CYxhhFBd.png",c="/front-ent/blog/assets/mvc-Dc7Qhngo.png",i="/front-ent/blog/assets/xy-oyNbjI7c.png",o="/front-ent/blog/assets/link-C1XF7uOe.png",u="/front-ent/blog/assets/git-Cu4LDgie.jpg",r={};function d(k,n){return t(),a("div",null,n[0]||(n[0]=[p('<h1 id="原理类" tabindex="-1"><a class="header-anchor" href="#原理类"><span>原理类</span></a></h1><h2 id="settimeout-的机制" tabindex="-1"><a class="header-anchor" href="#settimeout-的机制"><span>settimeout 的机制</span></a></h2><p><code>javascript</code>是一门单线程语言,当<code>javascript</code>运行时遇到<code>setTimeout</code>后其实会另开一条线程</p><h2 id="tcp-和-udp-的区别" tabindex="-1"><a class="header-anchor" href="#tcp-和-udp-的区别"><span>TCP 和 UDP 的区别</span></a></h2><p><img src="'+e+'" alt="TCP 和 UDP 的区别"></p><h2 id="了解mvvm-mvc的区别" tabindex="-1"><a class="header-anchor" href="#了解mvvm-mvc的区别"><span>了解MVVM MVC的区别</span></a></h2><h4 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h4><p><img src="'+l+'" alt="MVVM"></p><ul><li><code>ViewModel</code> 通过实现一套数据响应式机制自动响应Model中数据变化；</li><li>同时 <code>Viewmodel</code> 会实现一套更新策略自动将数据变化转换为视图更新；</li><li>通过事件监听响应View中用户交互修改 Model 中数据。</li><li>这样在 ViewModel 中就减少了大量DOM操作代码。</li></ul><h4 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>MVC</span></a></h4><p><img src="'+c+'" alt="cmd-markdown-logo"><br> 简单来说就是通过controller的控制去操作model层的数据，并且返回给view层展示</p><ul><li><code>Model</code>：负责保存应用数据，与后端数据进行同步。</li><li><code>Controller</code>：负责业务逻辑，根据用户行为对 <code>Model</code> 数据进行修改。</li><li><code>View</code>：负责视图展示，将 <code>Model</code> 中的数据可视化出来。</li></ul><h2 id="网络七层协议" tabindex="-1"><a class="header-anchor" href="#网络七层协议"><span>网络七层协议</span></a></h2><p><img src="'+i+'" alt="网络七层协议"></p><h2 id="http-和-https-的区别" tabindex="-1"><a class="header-anchor" href="#http-和-https-的区别"><span>http 和 https 的区别</span></a></h2><ul><li>HTTP 的 URL 以 http:// 开头，而 HTTPS 的 URL 以 https:// 开头</li><li>HTTP 是不安全的，而 HTTPS 是安全的</li><li>HTTP 标准端口是 80 ，而 HTTPS 的标准端口是 443</li><li>在 OSI 网络模型中，HTTP 工作于应用层，而 HTTPS 工作在传输层</li><li>HTTP 无需加密，而 HTTPS 对传输的数据进行加密</li><li>HTTP 无需证书，而 HTTPS 需要认证证书</li></ul><h2 id="输入-url-到显示的过程" tabindex="-1"><a class="header-anchor" href="#输入-url-到显示的过程"><span>输入 url 到显示的过程</span></a></h2><p><img src="'+o+'" alt="cmd-markdown-logo"></p><ol><li>输入网址： http://www.baidu.com</li><li>通过DNS解析获得网址的对应IP地址</li><li>浏览器与远程web服务器 通过TCP三次握手建立TCP/IP连接</li><li>浏览器向web服务器发送一个HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>断开链接</li></ol><h2 id="dns-解析过程" tabindex="-1"><a class="header-anchor" href="#dns-解析过程"><span>dns 解析过程</span></a></h2><ol><li>现在我有一台计算机，通过ISP接入了互联网，那么ISP就会给我分配一个DNS服务器，这个DNS服务器不是权威服务器，而是相当于一个代理的dns解析服务器，他会帮你迭代权威服务器返回的应答，然后把最终查到IP返回给你。</li><li>现在的我计算机要向这台ISPDNS发起请求查询www.baidu.com这个域名了，(经网友提醒：这里其实准确来说不是ISPDNS，而应该是用户自己电脑网络设置里的DNS，并不一定是ISPDNS。比如也有可能你手工设置了8.8.8.8)</li><li>ISPDNS拿到请求后，先检查一下自己的缓存中有没有这个地址，有的话就直接返回。这个时候拿到的ip地址，会被标记为非权威服务器的应答。</li><li>如果缓存中没有的话，ISPDNS会从配置文件里面读取13个根域名服务器的地址（这些地址是不变的，直接在BIND的配置文件中），</li><li>然后像其中一台发起请求。</li><li>根服务器拿到这个请求后，知道他是com.这个顶级域名下的，所以就会返回com域中的NS记录，一般来说是13台主机名和IP。</li><li>然后ISPDNS向其中一台再次发起请求，com域的服务器发现你这请求是baidu.com这个域的，我一查发现了这个域的NS，那我就返回给你，你再去查。 （目前百度有4台baidu.com的顶级域名服务器）。</li><li>ISPDNS不厌其烦的再次向baidu.com这个域的权威服务器发起请求，baidu.com收到之后，查了下有www的这台主机，就把这个IP返回给你了，</li><li>然后ISPDNS拿到了之后，将其返回给了客户端，并且把这个保存在高速缓存中</li></ol><h2 id="https-具体的传输过程" tabindex="-1"><a class="header-anchor" href="#https-具体的传输过程"><span>https 具体的传输过程</span></a></h2><ol><li>客户端通过TCP三次握手发起链接</li><li>服务器将CA证书返回给客户端</li><li>客户端验证服务器证书的合法性</li><li>客户端生成随机对称秘钥</li><li>将客户端生成的对称秘钥通过证书的公钥进行非对称加密发给服务器</li><li>双方通过客户端生成的随机秘钥进行HTTP通信。</li></ol><h2 id="讲下git工作原理" tabindex="-1"><a class="header-anchor" href="#讲下git工作原理"><span>讲下git工作原理</span></a></h2><p><img src="'+u+`" alt="cmd-markdown-logo"><a href="https://www.sohu.com/a/115137833_494937" target="_blank" rel="noopener noreferrer">参考</a></p><h2 id="讲下图片缓存和图片预加载" tabindex="-1"><a class="header-anchor" href="#讲下图片缓存和图片预加载"><span>讲下图片缓存和图片预加载</span></a></h2><ul><li><strong>缓存</strong>：浏览器在需要进行图片操作之前，会先查看本地是否有缓存，如果有，会先读取缓存；如果没有，才会去发起网络请求</li><li><strong>预加载</strong>：提升体验效果</li></ul><h2 id="讲下浏览器的渲染流程" tabindex="-1"><a class="header-anchor" href="#讲下浏览器的渲染流程"><span>讲下浏览器的渲染流程</span></a></h2><ol><li>解析html建立dom树</li><li>解析css构建render树（将CSS代码解析成树形的数据结构，然后结合DOM合并成render树）</li><li>布局render树（Layout/reflow），负责各元素尺寸、位置的计算</li><li>绘制render树（paint），绘制页面像素信息</li><li>浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上。</li></ol><h2 id="进程-线程的概念-线程如何通讯" tabindex="-1"><a class="header-anchor" href="#进程-线程的概念-线程如何通讯"><span>进程，线程的概念，线程如何通讯</span></a></h2><h4 id="讲一下栈和队列-项目或实际应用有哪些" tabindex="-1"><a class="header-anchor" href="#讲一下栈和队列-项目或实际应用有哪些"><span>讲一下栈和队列，项目或实际应用有哪些</span></a></h4><p><strong>栈</strong>：栈是一种先进后出的远测的有序集合。新添加或删除的元素都是从栈的末尾里操作的，栈的末尾称为栈顶，另一端称为栈底</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//创建一个类表示栈</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//定义一个数组来存储栈的元素</span></span>
<span class="line"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//表示往栈顶里添加元素</span></span>
<span class="line"><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//表示往栈顶里删除一个元素</span></span>
<span class="line"><span class="token function">topElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回一个栈顶元素</span></span>
<span class="line"><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断栈里是否为空，如果为空则返回true</span></span>
<span class="line"><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//清空栈里的元素</span></span>
<span class="line"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回栈里的元素个数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">del</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">topElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">clear</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">{</span></span>
<span class="line">		arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">size</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> arr<span class="token punctuation">.</span>length</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//实例化栈对象</span></span>
<span class="line"><span class="token keyword">var</span> Stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>队列</strong>：队列是先进先出原则，添加元素是从队尾添加，删除元素是从队首删除，最新的元素是在队尾</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//创建一个类表示队列</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//定义一个数组存储队列元素</span></span>
<span class="line"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//表示向队尾添加一个元素</span></span>
<span class="line"><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//表示向队首删除一个元素</span></span>
<span class="line"><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回队首的元素</span></span>
<span class="line"><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断队列是否空</span></span>
<span class="line"><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//清空队列里的元素</span></span>
<span class="line"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回队列里的元素个数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">del</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">front</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">clear</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">size</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> arr<span class="token punctuation">.</span>length</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//实例化一个队列对象</span></span>
<span class="line"><span class="token keyword">var</span> Queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请解释一下javascript的同源策略。" tabindex="-1"><a class="header-anchor" href="#请解释一下javascript的同源策略。"><span>请解释一下JavaScript的同源策略。</span></a></h2><ul><li>在客户端编程语言中，如j<code>avascript</code>和 <code>ActionScript</code>，同源策略是一个很重要的安全理念，它在保证数据的安全性方面有着重要的意义。</li><li>同源策略规定跨域之间的脚本是隔离的，一个域的脚本不能访问和操作另外一个域的绝大部分属性和方法。</li></ul><h4 id="什么叫相同域-什么叫不同的域" tabindex="-1"><a class="header-anchor" href="#什么叫相同域-什么叫不同的域"><span>什么叫相同域，什么叫不同的域？</span></a></h4><ul><li>当两个域具有相同的协议, 相同的端口，相同的<code>host</code>，那么我们就可以认为它们是相同的域。</li><li>同源策略还应该对一些特殊情况做处理，比如限制<code>file</code>协议下脚本的访问权限。</li><li>本地的HTML文件在浏览器中是通过<code>file</code>协议打开的，如果脚本能通过<code>file</code>协议访问到硬盘上其它任意文件，就会出现安全隐患，目前<code>IE8</code>还有这样的隐患</li></ul>`,39)]))}const m=s(r,[["render",d],["__file","principle.html.vue"]]),h=JSON.parse('{"path":"/principle.html","title":"原理类","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"settimeout 的机制","slug":"settimeout-的机制","link":"#settimeout-的机制","children":[]},{"level":2,"title":"TCP 和 UDP 的区别","slug":"tcp-和-udp-的区别","link":"#tcp-和-udp-的区别","children":[]},{"level":2,"title":"了解MVVM MVC的区别","slug":"了解mvvm-mvc的区别","link":"#了解mvvm-mvc的区别","children":[]},{"level":2,"title":"网络七层协议","slug":"网络七层协议","link":"#网络七层协议","children":[]},{"level":2,"title":"http 和 https 的区别","slug":"http-和-https-的区别","link":"#http-和-https-的区别","children":[]},{"level":2,"title":"输入 url 到显示的过程","slug":"输入-url-到显示的过程","link":"#输入-url-到显示的过程","children":[]},{"level":2,"title":"dns 解析过程","slug":"dns-解析过程","link":"#dns-解析过程","children":[]},{"level":2,"title":"https 具体的传输过程","slug":"https-具体的传输过程","link":"#https-具体的传输过程","children":[]},{"level":2,"title":"讲下git工作原理","slug":"讲下git工作原理","link":"#讲下git工作原理","children":[]},{"level":2,"title":"讲下图片缓存和图片预加载","slug":"讲下图片缓存和图片预加载","link":"#讲下图片缓存和图片预加载","children":[]},{"level":2,"title":"讲下浏览器的渲染流程","slug":"讲下浏览器的渲染流程","link":"#讲下浏览器的渲染流程","children":[]},{"level":2,"title":"进程，线程的概念，线程如何通讯","slug":"进程-线程的概念-线程如何通讯","link":"#进程-线程的概念-线程如何通讯","children":[]},{"level":2,"title":"请解释一下JavaScript的同源策略。","slug":"请解释一下javascript的同源策略。","link":"#请解释一下javascript的同源策略。","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"principle.md"}');export{m as comp,h as data};
