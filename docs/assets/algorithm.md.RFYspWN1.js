import{_ as a,c as i,a0 as n,o as t}from"./chunks/framework.3pFVRg9s.js";const h="/front-end/assets/quick-sort.DD28bswc.gif",l="/front-end/assets/sort-time.DSLVsjHt.png",g=JSON.parse('{"title":"算法类","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm.md","filePath":"algorithm.md"}'),e={name:"algorithm.md"};function r(k,s,p,d,E,o){return t(),i("div",null,s[0]||(s[0]=[n('<h1 id="算法类" tabindex="-1">算法类 <a class="header-anchor" href="#算法类" aria-label="Permalink to &quot;算法类&quot;">​</a></h1><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noreferrer">参考</a></p><h2 id="a-n-怎么用小于-o-n-的算法实现" tabindex="-1">a^n 怎么用小于 O(n) 的算法实现 <a class="header-anchor" href="#a-n-怎么用小于-o-n-的算法实现" aria-label="Permalink to &quot;a^n 怎么用小于 O(n) 的算法实现&quot;">​</a></h2><h2 id="快排的原理" tabindex="-1">快排的原理 <a class="header-anchor" href="#快排的原理" aria-label="Permalink to &quot;快排的原理&quot;">​</a></h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。 <img src="'+h+`" alt="快排的原理"></p><h2 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (array .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            array .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="写一个函数判断是否存在循环引用" tabindex="-1">写一个函数判断是否存在循环引用 <a class="header-anchor" href="#写一个函数判断是否存在循环引用" aria-label="Permalink to &quot;写一个函数判断是否存在循环引用&quot;">​</a></h2><h2 id="排序算法-时间复杂度" tabindex="-1">排序算法，时间复杂度 <a class="header-anchor" href="#排序算法-时间复杂度" aria-label="Permalink to &quot;排序算法，时间复杂度&quot;">​</a></h2><p><img src="`+l+'" alt="排序算法，时间复杂度"></p><h2 id="平衡二叉树" tabindex="-1">平衡二叉树 <a class="header-anchor" href="#平衡二叉树" aria-label="Permalink to &quot;平衡二叉树&quot;">​</a></h2>',11)]))}const y=a(e,[["render",r]]);export{g as __pageData,y as default};
